量測時間
var t3 = performance.now();
var t4 = performance.now();
console.log("read socket time " + (t4 - t3) + " milliseconds.");

讀取片段字串
var newData = oldData.slice(start, end);

宣告建立 type array
var Data = new Uint8Array(length)
var Data = new Uint8Array(typeArray)

array 合併
this.jpegData = new Uint8Array(this.moreData.length + oldData.length)
this.jpegData.set(this.moreData);
this.jpegData.set(oldData, this.moreData.length);

轉 2 8 16 進位
var a = parseInt("10") + "<br>";
var b = parseInt("10.00") + "<br>";
var c = parseInt("10.33") + "<br>";
var d = parseInt("34 45 66") + "<br>";
var e = parseInt(" 60 ") + "<br>";
var f = parseInt("40 years") + "<br>";
var g = parseInt("He was 40") + "<br>";

var h = parseInt("10", 10)+ "<br>";
var i = parseInt("010")+ "<br>";
var j = parseInt("10", 8)+ "<br>";
var k = parseInt("0x10")+ "<br>";
var l = parseInt("10", 16)+ "<br>";

var n = a + b + c + d + e + f + g + "<br>" + h + i + j + k +l;
10
10
10
34
60
40
NaN

10
10
8
16
16

var a = parseInt(size[0], 10).toString(2)

合併字串
var x = y.concat(z)
var aa = ((k.concat(j)).concat(b)).concat(a)

字串左右邊捕0
	if(a.length < 8){
       a = '' + a;
       a = new Array(8- a.length + 1).join("0") + a;
    }

call other function

_parent.startRead.call(_parent, this.messageType, this.messageSize, this.messageState);

startRead: function(type, size, state) {
}

toString() method to output numbers as base 16 (hex), base 8 (octal), or base 2 (binary).
var myNumber = 128;
myNumber.toString(16);  // returns 80
myNumber.toString(8);   // returns 200
myNumber.toString(2);   // returns 10000000

Comparing two JavaScript objects will always return false.

toExponential() returns a string, with a number rounded and written using exponential notation.
var x = 9.656;
x.toExponential(2);     // returns 9.66e+0
x.toExponential(4);     // returns 9.6560e+0
x.toExponential(6);     // returns 9.656000e+0

toFixed() returns a string, with the number written with a specified number of decimals:
var x = 9.656;
x.toFixed(0);           // returns 10
x.toFixed(2);           // returns 9.66
x.toFixed(4);           // returns 9.6560
x.toFixed(6);           // returns 9.656000

toPrecision() returns a string, with a number written with a specified length:
var x = 9.656;
x.toPrecision();        // returns 9.656
x.toPrecision(2);       // returns 9.7
x.toPrecision(4);       // returns 9.656
x.toPrecision(6);       // returns 9.65600

Number() can be used to convert JavaScript variables to numbers:
x = true;
Number(x);        // returns 1
x = false;     
Number(x);        // returns 0
x = new Date();
Number(x);        // returns 1404568027739
x = "10"
Number(x);        // returns 10
x = "10 20"
Number(x);        // returns NaN

Math.round(x) returns the value of x rounded to its nearest integer: 四捨五入
Math.round(4.7);    // returns 5
Math.round(4.4);    // returns 4

Math.pow(x, y) returns the value of x to the power of y: 次方
Math.pow(8, 2);      // returns 64

Math.sqrt(x) returns the square root of x: 開根號
Math.sqrt(64);      // returns 8

Math.ceil(x) returns the value of x rounded up to its nearest integer: 無條件進入
Math.ceil(4.4);     // returns 5

Math.floor(x) returns the value of x rounded down to its nearest integer: 無條件捨去
Math.floor(4.7);    // returns 4

Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:
Math.min(0, 150, 30, 20, -8, -200);  // returns -200
Math.max(0, 150, 30, 20, -8, -200);  // returns 150

Math.random() returns a random number between 0 (inclusive),  and 1 (exclusive):
Math.random();     // returns a random number

Math.random() used with Math.floor() can be used to return random integers.
Math.floor(Math.random() * 10);     // returns a number between 0 and 9
Math.floor(Math.random() * 11);      // returns a number between 0 and 10
Math.floor(Math.random() * 10) + 1;  // returns a number between 1 and 10
Math.floor(Math.random() * 100) + 1; // returns a number between 1 and 100

JavaScript Date Formats
A JavaScript date can be written as a string:
Sun Jul 16 2017 15:50:04 GMT+0800 (台北標準時間)
or as a number:
1500191404534
Dates written as numbers, specifies the number of milliseconds since January 1, 1970, 00:00:00.

The toDateString() method converts a date to a more readable format:
<script>
var d = new Date();
document.getElementById("demo").innerHTML = d.toDateString();
</script>

Date Get Methods
Get methods are used for getting a part of a date. Here are the most common (alphabetically):

Method	Description
getDate()	Get the day as a number (1-31)
getDay()	Get the weekday as a number (0-6)
getFullYear()	Get the four digit year (yyyy)
getHours()	Get the hour (0-23)
getMilliseconds()	Get the milliseconds (0-999)
getMinutes()	Get the minutes (0-59)
getMonth()	Get the month (0-11)
getSeconds()	Get the seconds (0-59)
getTime()	Get the time (milliseconds since January 1, 1970)

Avoid new Array()
There is no need to use the JavaScript's built-in array constructor new Array().
Use [] instead.
These two different statements both create a new empty array named points:
var points = new Array();         // Bad
var points = [];                  // Good 

Popping and Pushing
When you work with arrays, it is easy to remove elements and add new elements.
This is what popping and pushing is:
Popping items out of an array, or pushing items into an array.

The pop() method removes the last element from an array:
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.pop();              // Removes the last element ("Mango") from fruits

The push() method returns the new array length:
var fruits = ["Banana", "Orange", "Apple", "Mango"];
var x = fruits.push("Kiwi");   //  the value of x is 5

The shift() method removes the first array element and "shifts" all other elements to a lower index.
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.shift();            // Removes the first element "Banana" from fruits

The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements:
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.unshift("Lemon");    // Adds a new element "Lemon" to fruits

Splicing an Array
The splice() method can be used to add new items to an array:
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi");

Merging (Concatenating) Arrays
The concat() method creates a new array by merging (concatenating) existing arrays:
var myGirls = ["Cecilie", "Lone"];
var myBoys = ["Emil", "Tobias","Linus"];
var myChildren = myGirls.concat(myBoys);     // Concatenates (joins) myGirls and myBoys

Numeric Sort
By default, the sort() function sorts values as strings.
This works well for strings ("Apple" comes before "Banana").
However, if numbers are sorted as strings, "25" is bigger than "100", because "2" is bigger than "1".
Because of this, the sort() method will produce incorrect result when sorting numbers.
You can fix this by providing a compare function:
Example
var points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a - b});

Find the Highest (or Lowest) Array Value
There are no built-in functions for finding the max or min value in an array.
However, after you have sorted an array, you can use the index to obtain the highest and lowest values.
Sorting ascending:
Example
var points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a - b});
// now points[0] contains the lowest value
// and points[points.length-1] contains the highest value
Try it Yourself »
Sorting descending:
Example
var points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return b - a});
// now points[0] contains the highest value
// and points[points.length-1] contains the lowest value

Using Math.max() on an Array
You can use Math.max.apply to find the highest number in an array:
Example
function myArrayMax(arr) {
    return Math.max.apply(null, arr);
}
Try it Yourself »
Math.max.apply([1, 2, 3]) is equivalent to Math.max(1, 2, 3).

Using Math.min() on an Array
You can use Math.min.apply to find the lowest number in an array:
Example
function myArrayMin(arr) {
    return Math.min.apply(null, arr);
}